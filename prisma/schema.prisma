generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
}

enum MembershipRole {
  ADMIN
  USER
}

enum GlobalRole {
  SUPERADMIN
  USER
}

enum Provider {
  WEB
  SLACK
}

enum BookmarkDigestStyle {
  BLOCK
  INLINE
  TWEET_EMBED
}

enum DigestBlockType {
  BOOKMARK
  TEXT
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          GlobalRole   @default(USER)
  memberships   Membership[]
  defaultTeam   Team?        @relation(fields: [defaultTeamId], references: [id], onDelete: SetNull)
  defaultTeamId String?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Team {
  id          String         @id @default(uuid())
  name        String
  slug        String
  memberships Membership[]
  subscriptions Subscription[]
  users       User[]
  Digest      Digest[]
  bookmarks   Bookmark[]
  slackToken  String?
  slackTeamId String?
  typefullyToken String?
  bio         String?
  website     String?
  twitter     String?
  github      String?
  createdAt   DateTime   @default(now())
  apiKey      String?
  nextSuggestedDigestTitle String?
  color       String?
  subscriptionId String?
  prompt    String? 
  
  @@unique([id, slackTeamId])
  @@unique(slug)
  @@map("teams")
}

model Membership {
  id           String         @id @default(uuid())
  role         MembershipRole
  team         Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId       String
  user         User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?
  invitedName  String?
  invitedEmail String?
  invitations  Invitation[]
  bookmark     Bookmark[]

  @@unique([teamId, invitedEmail])
  @@map("memberships")
}

model Invitation {
  id           String     @id @default(uuid())
  membership   Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  membershipId String
  expiredAt    DateTime
  createdAt    DateTime   @default(now())
  validatedAt  DateTime?

  @@map("invitations")
}

model Link {
  id          String     @id @default(uuid())
  url         String
  image       String?
  blurHash    String?
  title       String?
  logo        String?
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  bookmark    Bookmark[]
  tags Tag[] @relation("links_to_tags")
  @@map("links")
}

model Bookmark {
  id           String     @id @default(uuid())
  link         Link       @relation(fields: [linkId], references: [id], onDelete: Cascade)
  linkId       String
  membership   Membership? @relation(fields: [membershipId], references: [id], onDelete: SetNull)
  membershipId String?
  team         Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId       String
  provider     Provider   @default(WEB)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  digestBlocks DigestBlock[]
  metadata     Json?
  views        Int @default(0)
  @@map("bookmarks")
}

model Digest {
  id          String     @id @default(uuid())
  title       String
  slug        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  publishedAt DateTime?
  team        Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      String
  digestBlocks   DigestBlock[]
  typefullyThreadUrl String?
  hasSentNewsletter Boolean @default(false)
  isFeatured Boolean @default(false)
  isTemplate Boolean @default(false)
  views       Int @default(0)
  @@unique([slug, teamId])
  @@map("digests")
}


model DigestBlock {
  id          String   @id @default(uuid())
  bookmark    Bookmark? @relation(fields : [bookmarkId], references : [id], onDelete: Cascade)
  bookmarkId  String?
  digest      Digest   @relation(fields : [digestId], references: [id], onDelete: Cascade)
  digestId    String
  order       Int
  style       BookmarkDigestStyle @default(BLOCK)
  title       String?
  description String?
  type        DigestBlockType @default(BOOKMARK)
  text        String?
  isTemplate Boolean @default(false)
  tags Tag[] @relation("digestblocks_to_tags")

  @@unique([bookmarkId, digestId])
  @@map("digest_blocks")
}

model Subscription {
  id           String   @id @default(uuid())
  team         Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId       String
  email        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("subscriptions")
}

model Tag {
  id          String   @id @default(uuid())
  name        String
  slug        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  links       Link[]   @relation("links_to_tags")
  bookmarks   DigestBlock[] @relation("digestblocks_to_tags")
  @@map("tags")
}